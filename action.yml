name: Build Container

description: Builds container images

inputs:
  image_name:
    description: name of the image to build
    required: true
  image_variant:
    description: name of the image variant
    required: false
    default: ""
  version:
    description: primary tag to assign to the image
    required: true
  support:
    description: latest, gts, or empty
    required: false
    default: ""
  extra_tags:
    description: extra tags to be passed to buildah
    required: false 
  extra_build_args:
    description: extra args to be passed to buildah
    required: false
    default: ""
  signing_key:
    description: key to sign images
    required: true
  #TODO: Split Containerfiles
  target:
    description: target to build in Containerfile
    required: false
    default: none
  container_registry:
    description: registry to store resulting container
    required: false
    default: ghcr.io/${{ github.repository_owner }}
  container_repo:
    description: repository for the container image
    required: false
    default: ${{ github.repository }}
  container_ref:
    description: repository ref for the container image
    required: false
    default: ${{ github.ref }}
  push_container:
    description: whether to push the resulting container image
    required: false
    default: "true"
  file:
    description: path to the Containerfile
    required: false
    default: ./Containerfile
  
runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive
        ref: ${{ inputs.container_ref }}
        repository: ${{ inputs.container_repo }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Cache var-cache-rpm-ostree
      id: cache-var-cache-rpm-ostree
      uses: actions/cache@v3
      with:
        path: var-cache-rpm-ostree
        key: var-cache-rpm-ostree-${{ hashFiles('Dockerfile') }}
    - name: Cache var-lib-rpm-ostree
      id: cache-var-lib-rpm-ostree
      uses: actions/cache@v3
      with:
        path: var-lib-rpm-ostree
        key: var-lib-rpm-ostree-${{ hashFiles('Dockerfile') }}
    - name: inject var-cache-rpm-ostree into docker
      uses: reproducible-containers/buildkit-cache-dance@v2.1.4
      with:
        cache-source: var-cache-rpm-ostree
        cache-target: /var/cache/rpm-ostree
        skip-extraction: ${{ steps.cache-var-cache-rpm-ostree.outputs.cache-hit }}
    - name: inject var-lib-rpm-ostree into docker
      uses: reproducible-containers/buildkit-cache-dance@v2.1.4
      with:
        cache-source: var-lib-rpm-ostree
        cache-target: /var/lib/rpm-ostree
        skip-extraction: ${{ steps.cache-var-lib-rpm-ostree.outputs.cache-hit }}

    # Workaround bug where capital letters in your GitHub username make it impossible to push to GHCR.
    # https://github.com/macbre/push-to-ghcr/issues/12
    - name: Lowercase Registry
      id: registry_case
      uses: ASzc/change-string-case-action@v6
      with:
        string: ${{ inputs.container_registry }}

    - name: Export registry name
      shell: bash
      run: echo "IMAGE_REGISTRY=${{ steps.registry_case.outputs.lowercase }}" >> $GITHUB_ENV

    - name: Log in to ghcr.io
      uses: docker/login-action@v3
      with:
        username: ${{ env.REGISTRY_USER }}
        registry: ${{ env.IMAGE_REGISTRY }}
        password: ${{ env.REGISTRY_PASSWORD }}
      env:
        REGISTRY_USER: ${{ github.actor }}
        REGISTRY_PASSWORD: ${{ github.token }}

    - name: Free disk space (Ubuntu)
      uses: jlumbroso/free-disk-space@v1.3.1
      with:
        # this might remove tools that are actually needed,
        # if set to "true" but frees about 6 GB
        tool-cache: false

        # all of these default to true, but feel free to set to
        # "false" if necessary for your workflow
        android: true
        docker-images: true
        dotnet: true
        haskell: true
        large-packages: true
        swap-storage: true

    - name: Generate image name
      id: generate-name
      shell: bash
      run: |
        if [[ "${{ inputs.image_variant }}" == "main" ]]
        then
          echo "image_name=${{ inputs.image_name }}" >> $GITHUB_OUTPUT
        elif [[ "${{ inputs.image_variant }}" =~ "main-*" ]]
        then
          variant=${{ inputs.image_variant }}
          echo "image_name=${{ inputs.image_name }}-${variant:5}" >> $GITHUB_OUTPUT
        else
          echo "image_name=${{ format('{0}-{1}', inputs.image_name, inputs.image_variant) }}" >> $GITHUB_OUTPUT
        fi

    # Build metadata
    - name: Image Metadata
      uses: docker/metadata-action@v5
      id: meta
      with:
        images: |
          ${{ inputs.container_registry }}/${{ steps.generate-name.outputs.image_name }}
        labels: |
          org.opencontainers.image.version=${{ inputs.version }}
          org.opencontainers.image.title=${{ steps.generate-name.outputs.image_name }}
          org.opencontainers.image.description=An interpretation of the Ubuntu spirit built on Fedora technology
          io.artifacthub.package.logo-url=https://avatars.githubusercontent.com/u/120078124?s=200&v=4
          io.artifacthub.package.readme-url=https://raw.githubusercontent.com/${{ github.repository }}/main/README.md
        tags: |
            type=sha
            type=schedule
            type=ref,event=tag
            type=ref,event=branch
            type=semver,pattern={{version}}

    - name: Determine extra args
      id: extra-args
      shell: bash
      run: |
        if [[ ${{ inputs.target }} == "none" ]]
        then
          echo "args=" >> $GITHUB_OUTPUT
        else
          echo "args=--target=${{ inputs.target }}" >> $GITHUB_OUTPUT
        fi

    # Build image using Buildah action
    - name: Build Image
      id: build_image
      uses: docker/build-push-action@v5
      env:
        DOCKER_BUILDKIT: "1"
        BUILDX_EXPERIMENTAL: "1"
      with:
        context: .
        pull: true
        cache-from: type=gha
        file: ${{ inputs.file }}
        cache-to: type=gha,mode=max
        tags: |
          ${{ steps.meta.outputs.tags }}
          ${{ inputs.extra_tags }}
        labels: ${{ steps.meta.outputs.labels }}
        push: ${{ inputs.push_container == 'true' }}
        annotations: ${{ steps.meta.outputs.annotations }}
        build-args: |
          IMAGE_NAME=${{ inputs.image_name }}
          TARGET_BASE=${{ inputs.image_variant }}
          IMAGE_FLAVOR=${{ inputs.image_variant }}
          FEDORA_MAJOR_VERSION=${{ inputs.version }}
          IMAGE_VENDOR=${{ github.repository_owner }}
          ${{ inputs.extra_build_args }}

    - name: Get list of images to verify
      id: images_to_verify
      shell: bash
      run: |
        # grep may return 1 if no ublue images were used
        set +o pipefail

        ublue_images=$(buildah images | tail -n +2 | grep -v localhost | awk '{print $1}' | grep '^ghcr.io/ublue-os' | tr '\n' ' ')
        echo "ublue_images=${ublue_images}" >> $GITHUB_OUTPUT

    - name: Verify base image
      uses: EyeCantCU/cosign-action/verify@v0.2.2
      with:
        containers: ${{ steps.images_to_verify.output.ublue_images }}
        pubkey: https://raw.githubusercontent.com/ublue-os/main/main/cosign.pub

    # Sign container
    - uses: sigstore/cosign-installer@v3.4.0
      if: inputs.push_container == 'true' && github.event_name == 'push' && github.ref == github.event.repository.default_branch

    - name: Sign container image
      shell: bash
      if: inputs.push_container == 'true' && github.event_name == 'push' && github.ref == github.event.repository.default_branch
      run: |
        cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.IMAGE_REGISTRY }}/${{ steps.build_image.outputs.image }}@${TAGS}
      env:
        TAGS: ${{ steps.push.outputs.digest }}
        COSIGN_EXPERIMENTAL: "false"
        COSIGN_PRIVATE_KEY: ${{ inputs.signing_key }}
